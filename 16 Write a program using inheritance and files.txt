AIM : Create a class hierarchy of employee as a parent class and manager,scientist,loborer
class as child class.Assume suitable data members and members functions to implement this
relationship and write an interactive program to write,read,display the data from file for any type of
employee

#include <iostream>
#include<fstream>

using namespace std;

class Employee{
private:
    string name;
    int age;
public:
    Employee();
    void setName(string n);
    string getName();
    void setAge(int a);
    int getAge();
    static void displayAll();
    //friend ostream & operator<<()=0;
};


void Employee::displayAll(){
    string content;
    ifstream ifc;
    ifc.seekg(0);
    cout<<"Showing all data"<<endl;
    ifc.open("person.txt",ios::in);
    if(!ifc.is_open()){cout<<"Cannot open file"<<endl;}
    while(!ifc.eof()){
        ifc>>content;
        cout<<content<<endl;
    }
    ifc.close();
}

class Manager:public Employee{
private:
    string work;
public:
    Manager();
    void setWork(string w);
    string getWork();
    void display();
    friend ostream & operator<<(ostream& ofc, Manager& p){
        ofc<<p.getName()<<endl;
        ofc<<p.getAge()<<endl;
        ofc<<p.getWork()<<endl;
        ofc<<endl;
        return ofc;
    }
};

class Loborer:public Employee{
private:
    string work;
public:
    Loborer();
    void setWork(string w);
    string getWork();
    void display();
    friend ostream & operator<<(ostream& ofc, Loborer& p){
        ofc<<p.getName()<<endl;
        ofc<<p.getAge()<<endl;
        ofc<<p.getWork()<<endl;
        ofc<<endl;
        return ofc;
    }
};

class Scientist:public Employee{
private:
    string work;
public:
    Scientist();
    void setWork(string w);
    string getWork();
    void display();
    friend ostream & operator<<(ostream& ofc, Scientist& p){
        ofc<<p.getName()<<endl;
        ofc<<p.getAge()<<endl;
        ofc<<p.getWork()<<endl;
        ofc<<endl;
        return ofc;
    }
};

int main()
{
    ofstream ofc("employee.txt",ios::app);
    Manager m;
    m.setName("Anmol Shah");
    m.setAge(20);
    m.setWork("Project manager");
    ofc<<m;

    Scientist s;
    s.setName("Saloni");
    s.setAge(16);
    s.setWork("Biology research");
    ofc<<s;
}

Loborer::Loborer(){
    this->work = "Some Labouring work";
}
void Loborer::setWork(string w){this->work = w;}
string Loborer::getWork(){return this->work;}
void Loborer::display(){cout<<this->getName()<<" "<<this->getAge()<<" "<<this->work<<endl;}

Manager::Manager(){
    this->work = "Some Managing work";
}
void Manager::setWork(string w){this->work = w;}
string Manager::getWork(){return this->work;}
void Manager::display(){cout<<this->getName()<<" "<<this->getAge()<<" "<<this->work<<endl;}

Scientist::Scientist(){
    this->work = "Some Scientific work";
}
void Scientist::setWork(string w){this->work = w;}
string Scientist::getWork(){return this->work;}
void Scientist::display(){cout<<this->getName()<<" "<<this->getAge()<<" "<<this->work<<endl;}

int Employee::getAge(){
    return this->age;
}
void Employee::setAge(int a){
    this->age = a;
}
string Employee::getName(){
    return this->name;
}
void Employee::setName(string n){
    name = n;
}
Employee::Employee(){
    name = "Anonymous";
    age = 0;
}
